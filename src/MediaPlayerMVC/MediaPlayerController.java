package MediaPlayerMVC;

import javafx.application.Platform;
import javafx.concurrent.Service;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.HBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.util.Duration;
import java.io.File;
import java.net.URL;
import java.util.*;
import java.util.concurrent.CountDownLatch;

/**
 * This class will control the general flow of this application.
 * Any user input registered from the GUI and any necessary changes to
 * the GUI due to that input will be handled here.
 */
public class MediaPlayerController implements Initializable
{
    public enum PlayerStatus { READY, PLAYING, PAUSED, STOPPED }

    @FXML private HBox display;
    @FXML private ImageView playButton;
    @FXML private ImageView nextButton;
    @FXML private ImageView previousButton;

    private ArrayList<String> playListOptions;
    private MediaPlayer player;
    private MediaPlayerPlayList playList;
    private MediaView mediaView;
    private PlayerStatus status;

    private final String USER_DIR = "file:///" + (new File("").getAbsolutePath().replace("\\", "/"));
    private final Image FEELS_GOOD_MAN = new Image(USER_DIR + "/Images/feelsgoodman.jpeg");
    private final Image PEPEPLS = new Image(USER_DIR + "/Images/pepepls.gif");
    private final Image PAUSE = new Image(USER_DIR + "/Images/Pause.png");
    private final Image PLAY = new Image(USER_DIR + "/Images/play.png");

    /**
     * This method overrides the initialize method
     *
     * @param location
     * @param resources
     */
    @Override
    public void initialize(URL location, ResourceBundle resources)
    {
        playListOptions = new ArrayList();

        // Grab all binary files contained in the PlayLists folder.
        File tempFile = new File(System.getProperty("user.dir").replace("\\", "/") + "/PlayLists");

        File[] files = tempFile.listFiles((directory, fileName) -> {
            return fileName.toLowerCase().endsWith(".bin");
        });

        for(File file : files)
        {
           playListOptions.add(file.getAbsolutePath());
        }

        // Initialize the current playlist as the first one found.
        playList = new MediaPlayerPlayList(playListOptions.get(0));
        player = new MediaPlayer(new Media("file:///" + playList.next().absolutePath));

        mediaView = new MediaView();

        display.getChildren().addAll(new ImageView(FEELS_GOOD_MAN), new ImageView(FEELS_GOOD_MAN));

        playButton.setImage(PLAY);

        nextButton.setImage(new Image(USER_DIR + "/Images/next.png"));
        previousButton.setImage(new Image(USER_DIR + "/Images/previous.png"));

        status = PlayerStatus.PAUSED;
    }

    /**
     * This method will be called when the GUI's play/pause button is clicked.
     * Upon receiving this event, it will either play the currently loaded MediaFile or
     * pause the player.
     *
     * @param event The ActionEvent generated by the button clicked.
     */
    @FXML protected void playButtonAction(ActionEvent event)
    {
        if(status == PlayerStatus.PLAYING)
        {
            status = PlayerStatus.PAUSED;
            changeDisplay();
            player.pause();
            return;
        }

        status = PlayerStatus.PLAYING;
        changeDisplay();
        player.play();
        createPlayingService().start();

        event.consume();
    }

    /**
     * This method will be called when the GUI's previous button is clicked.
     * Upon receiving this event, it will either go to the previous MediaFile played or
     * restart the playing of the current MediaFile.
     *
     * @param event The ActionEvent generated by the button clicked.
     */
    @FXML protected void previousButtonAction(ActionEvent event)
    {
        boolean resumeAfter = status == PlayerStatus.PLAYING;

        player.stop();
        status = PlayerStatus.STOPPED;

        if(playList.hasPrevious() && player.getCurrentTime().lessThan(Duration.millis(10000)))
        {
            player = new MediaPlayer(new Media("file:///" + playList.previous().absolutePath));
            status = PlayerStatus.READY;
        }

        if(resumeAfter)
        {
            status = PlayerStatus.PLAYING;
            changeDisplay();
            player.play();
            createPlayingService().start();
        }
        else
        {
            changeDisplay();
        }

        event.consume();
    }

    /**
     * This method will be called when the GUI's next button is clicked.
     * Upon receiving this event, either skip to the next MediaFile in the playlist or
     * restart the playlist.
     *
     * @param event The ActionEvent generated by the button clicked.
     */
    @FXML protected void nextButtonAction(ActionEvent event)
    {
        boolean resumeAfter = status == PlayerStatus.PLAYING;

        player.stop();
        status = PlayerStatus.STOPPED;

        if(playList.hasNext())
        {
            player = new MediaPlayer(new Media("file:///" + playList.next().absolutePath));
            status = PlayerStatus.READY;
        }
        else
        {
            playList.restart();
            player = new MediaPlayer(new Media("file:///" + playList.next().absolutePath));
            status = PlayerStatus.READY;
            resumeAfter = false;
        }

        if(resumeAfter)
        {
            status = PlayerStatus.PLAYING;
            changeDisplay();
            player.play();
            createPlayingService().start();
        }
        else
        {
            changeDisplay();
        }

        event.consume();
    }

    /**
     * This method will make the necessary changes to the GUI's display field
     * when the status of the player is changed.
     */
    protected void changeDisplay()
    {
        switch (status)
        {
            case PLAYING :
            {
                display.getChildren().clear();

                if(player.getMedia().getSource().toLowerCase().endsWith(".mp4"))
                {
                    mediaView.setMediaPlayer(player);
                    display.getChildren().add(mediaView);
                }
                else
                {
                    display.getChildren().addAll(new ImageView(PEPEPLS), new ImageView(PEPEPLS));
                }

                playButton.setImage(PAUSE);

                break;
            }
            default :
            {
                display.getChildren().clear();

                display.getChildren().addAll(new ImageView(FEELS_GOOD_MAN), new ImageView(FEELS_GOOD_MAN));
                playButton.setImage(PLAY);
            }
        }
    }

    /**
     * This method will generate a new Service thread to perform the Task of continuously checking
     * to see whether or not a new MediaFile needs to be loaded and played.
     *
     * @return  null
     */
    private Service<Void> createPlayingService()
    {
        return new Service<Void>()
        {
            /**
             * This method overrides the createTask method and creates the Task
             * that is continuously checking to see whether or not a new MediaFile
             * needs to be loaded and played.
             *
             * @return  null
             */
            @Override
            protected Task<Void > createTask()
            {
                return new Task<Void>()
                {
                    /**
                     * This method overrides the call method and will continuously check
                     * to see whether or not a new MediaFile needs to be loaded and played.
                     *
                     * @return   null
                     * @throws Exception Any uncaught Exception that occurs
                     */
                    @Override
                    protected Void call()throws Exception
                    {
                        // If the player is not playing, terminate the thread.
                        while(status == PlayerStatus.PLAYING)
                        {
                            if(player.getCurrentTime().greaterThanOrEqualTo(player.getStopTime()))
                            {
                                // creates a CountDownLatch to determine when the code from the
                                // Platform.runLater thread runs.
                                final CountDownLatch latch = new CountDownLatch(1);

                                Platform.runLater(() -> {
                                    try
                                    {
                                        // wait until the latch countdown reaches zero.
                                        latch.await();
                                        changeDisplay();
                                    } catch (InterruptedException ex)
                                    {
                                        status =  PlayerStatus.STOPPED;
                                        changeDisplay();
                                        player.stop();
                                    }
                                });

                                if(playList.hasNext())
                                {
                                    player.stop();
                                    player = new MediaPlayer(new Media("file:///" + playList.next().absolutePath));

                                    // Make the latch countdown to zero and change the display according to the new MediaFile
                                    status = PlayerStatus.PLAYING;
                                    latch.countDown();
                                    player.play();
                                }
                                else
                                {
                                    // The end of the list has been reached, stop and restart.
                                    status = PlayerStatus.READY;
                                    latch.countDown();
                                    playList.restart();
                                    player.stop();
                                    player = new MediaPlayer(new Media("file:///" + playList.next().absolutePath));
                                }
                            }
                        }

                        return null;
                    }
                };
            }
        };
    }
}
